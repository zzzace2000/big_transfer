#!/usr/bin/env python

import os, argparse, platform

def mkdir_p(dir):
    '''make a directory (dir) if it doesn't exist'''
    if not os.path.exists(dir):
        os.mkdir(dir)

mkdir_p('./logs')

parser = argparse.ArgumentParser()

# adds only a small portion of the trainer's flag
parser.add_argument('--name', type=str, required=True)
parser.add_argument('--gpus', type=int, default=1)
parser.add_argument('--mem', type=int, default=16)
parser.add_argument('-p', '--partition', type=str, default=None)
parser.add_argument('--cpu', type=int, default=8)
parser.add_argument("--test_run", type=int, default=0)
parser.add_argument('--qos', type=str, default='normal')

args, unknownargs = parser.parse_known_args()

if args.partition is None:
    # If in vaugan, use t4v2 (the preemption one), else (q) use gpu
    if platform.node() == 'q.vector.local':
        args.partition = 'gpu'
    elif platform.node() in ['v', 'vremote']:
        args.partition = 't4v2'
    else:
        raise NotImplementedError()

temp_file = './tmp_sbatch_file.sh'

# #SBATCH â€”exclude=gpu070
with open(temp_file, 'w') as fh:
    fh.write(f"""#!/usr/bin/env bash

## SLURM SUBMIT SCRIPT
#SBATCH --nodes=1

#SBATCH -p {args.partition}
#SBATCH --gres=gpu:{args.gpus}
#SBATCH --mem={args.mem}G
#SBATCH --time=7-00:00:00
#SBATCH --job-name={args.name}
#SBATCH --output=logs/{args.name}.log
#SBATCH --cpus-per-task={args.cpu}
#SBATCH --qos={args.qos}
{'#SBATCH --account=deadline' if args.qos == 'deadline' else ''}

source /h/kingsley/.bashrc

conda activate cu101

# -------------------------
# debugging flags (optional)
export NCCL_DEBUG=INFO
export PYTHONFAULTHANDLER=1

{" ".join(unknownargs)} --name {args.name} --test_run 0
    """)

os.system("sbatch %s" % temp_file)
os.remove(temp_file)
